/**
 * File:	include/ldap-server/complex.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Dialogs definitions
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */

{

textdomain "ldap-server";

import "Label";
import "Popup";
import "Wizard";
import "LdapServer";
import "Package";
import "Service";

include "ldap-server/helps.ycp";

boolean DisplayError( map<string,string> error )
{
    if ( error["msg"]:nil != nil )
    {
        if ( error["details"]:nil != nil )
        {
            Popup::ErrorDetails(error["msg"]:"", error["details"]:"");
        }
        else
        {
            Popup::Error(error["msg"]:"");
        }
    }
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");

    /* ensure openldap2 package is installed */
    if( !Package::Install( "openldap2" ) )
    {
	if( !Package::Available( "openldap2" ) ) {
	    // translators: error popup before aborting the module
	    Popup::Error( sformat( _("The package '%1' is not available.
YaST2 cannot continue the configuration
without installing the package."), "openldap2" ) );
	}
	else
	{
	    // translators: error popup before aborting the module
	    Popup::Error (_("YaST2 cannot continue the configuration
without installing the required packages."));
	}
	return `abort;
    }

    boolean ret = LdapServer::Read();
    if ( ! ret )
    {
        DisplayError( LdapServer::ReadError() );
        return `abort;
    }
    boolean hasBackconfig = LdapServer::IsUsingBackconfig();
    boolean configModified = LdapServer::SlapdConfChanged(); //original shipped slapd.conf?

    boolean serviceEnabled = LdapServer::ReadServiceEnabled();
    boolean serviceRunning = LdapServer::ReadServiceRunning();
    boolean switchToBackConfig = false;
    boolean convert = false;

    //y2milestone("OpenLDAP running: %1", isRunning);
    y2milestone("OpenLDAP using backConfig: %1", hasBackconfig);
    y2milestone("OpenLDAP modifed config: %1", configModified);
    string configFile = "/etc/openldap/slapd.conf";
    if ( !hasBackconfig )
    {
        if ( configModified )
        {
            return `migrate;
        }
        else
        {
            // Start new config wizward
            LdapServer::InitDbDefaults();
            return `initial;
        }
    }
    else
    {
        if (! configModified )
        {
            // Start new config wizward
            LdapServer::InitDbDefaults();
            return `initial;
        }
        else if ( !serviceRunning )
        {
            symbol ret = Popup::AnyQuestion3( _("Existing configuration detected."), 
                _("You have an existing configuration, but the LDAP server is currently not running.
Do you want to start the server now and re-read its configuration data or do you 
want to create a new configuration from scratch?"),
                _("Restart"), Label::CancelButton(), _("New Configuration"), `focus_yes );
            if ( ret == `yes )
            {
                LdapServer::WriteRestartRequired( true );
                return `reread;
            }
            else  if (ret == `no )
            {
                return `abort;
            }
            else if ( ret == `retry )
            {
                // Start new config wizward
                LdapServer::InitDbDefaults();
                return `initial;
            }
        }
    }

    return `next;
}

symbol MigrationMainDialog()
{
    string caption = "Migrate existing Configuration";
    string summary = _("Your system is currently configured to use the configuration file
/etc/openldap/slapd.conf. YaST only supports the dynamic configuration
database of OpenLDAP (back-config). Do you want to migrate your existing
configuration to the configuration database?
");
    term contents =
        `VBox(
            `HSquash(
                `RadioButtonGroup(
                    `id( `rb ),
                    `VBox(
                        `Label( summary ),
                        `Left(
                            `RadioButton( `id( 0 ), _("Migrate existing configuration"), true )
                        ),
                        `Left(
                            `RadioButton( `id( 1 ), _("Create a new configuration from scratch") )
                        )
                    )
                )
            )
        );

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::NextButton());
    symbol ret = `next;
    while(true) {
	ret = (symbol)UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel )
        {
	    if( Popup::ReallyAbort(true) )
            {
                break;
            }
	    else
            {
                continue;
            }
	}
        else if ( ret == `next )
        {
            integer current = (integer) UI::QueryWidget(`id(`rb), `CurrentButton);
            if ( current == 0 )
            {
                ret = `next;
            }
            else
            {
                ret = `initial;
            }
            break;
        }
        else if ( ret == `back )
        {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;

}

symbol DoMigration()
{
    LdapServer::UseLdapiForConfig( true );
    if (! LdapServer::MigrateSlapdConf())
    {
        y2milestone("LdapServer::MigrateSlapdConf failed");
        DisplayError( LdapServer::ReadError() );
        return `abort;
    }
    LdapServer::Read();
    return `next;
}

/**
 * Write service settings dialog. This dialog writes only the service
 * settings (sysconfig and init.d stuff)
 * @return `reread if configuration needs to be reread and `next otherwise
 */
symbol WriteServiceDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = LdapServer::WriteServiceSettings();
    return ret ? `next : `reread;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = LdapServer::Write();
    if (! ret ) {
        DisplayError (LdapServer::ReadError ());
        return `abort;
    }
//    ret = LdapServer::WritePPolicyObjects();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* LdapServer summary dialog caption */
    string caption = _("LDAP Server Configuration Summary");

    string summary = LdapServer::Summary();

    /* Frame label */
    term contents =
        `VBox(
            `RichText( summary )
            //,
            //`Right(
            //    `PushButton( `id(`pb_advanced), _("Advanced Configuration") )
            //)
        );

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel )
        {
	    if( Popup::ReallyAbort(true))
            {
                break;
            }
	    else
            {
                continue;
            }
	}
        else if ( ret == `pb_advanced )
        {
            Popup::Error("Not there yet");
            LdapServer::ReadFromDefaults();
            ret = `advanced;
            break;
        }
        else if ( ret == `next )
        {
            if ( ! LdapServer::ReadFromDefaults() )
            {
                DisplayError( LdapServer::ReadError() );
                ret = `abort;
            }
            break;
        }
        else if ( ret == `back )
        {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
