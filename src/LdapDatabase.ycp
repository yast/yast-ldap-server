{
    textdomain "ldap-server";
    module "LdapDatabase";
    import "Label";
    import "LdapServer";
    import "Ldap";
    import "LdapPopup";
    import "Popup";
    import "Sequencer";
    import "String";
    import "Wizard";

    include "ldap-server/helps.ycp";
    include "ldap-server/widgets.ycp";
    include "users/ldap_dialogs.ycp";


    map <string, any> baseDb = $[ "rootdn" : "cn=Administrator", "directory" : "/var/lib/ldap" ];
    map <string, any> ppolicyNew = $[];
    map <string, any> syncReplNew = $[];
    list <map> acllist = [];

    string ldapconf_basedn = "";
    boolean createDbDir = false;
    boolean createBase = true;


    term editPolicy =
        `Top(
            `VBox(
                `VSpacing( 1 ),
                `Heading( _("Password Policy Settings") ),
                `VBox( `VSpacing(0.25),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_overlay ),`opt(`notify ),
                            _("Enable Password Policies"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_hashcleartext ),
                            _("Hash Clear Text Passwords"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_uselockout ),
                            _("Disclose \"Account Locked\" Status"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `VSquash(
                        `HBox(
                            `InputField( `id( `te_ppolicy_defaultpolicy ),
                                `opt( `hstretch ),
                                _("Default Policy Object DN"), "cn=Default Policy"
                            ),
                            `HSpacing( 0.5 ),
                            `VBox(
                                `Bottom(
                                    `CheckBox( `id( `cb_pp_append_basedn ),
                                            _("&Append Base DN"), true
                                    )
                                ),
                                `VSpacing( 0.3 )
                            ),
                            `HSpacing( 0.5 ),
                            `VBox(
                                `Bottom(
                                    `PushButton( `id( `pb_define_policy ), _("Edit Policy"))
                                ),
                                `VSpacing( 0.3 )
                            )

                        )
                    ),
                    `VSpacing(0.25)
                )
            )
        );

    global define boolean GetCreateBase()
    {
        return createBase;
    }

    global define boolean ResetCreateBase()
    {
        createBase = true;
        return true;
    }

    global define symbol AddDbBasic( boolean createDefaults )
    {
        boolean user_changed_dbdir = false;
        map <string, any> db = $[];
        integer numDbs = 0;
        if ( ! createDefaults )
        {
            list dblist = LdapServer::ReadDatabaseList();
            numDbs = size(dblist)-2; // don't count frontend and Config DB
        }
        string caption = _("New Database");

        term addDbWidget =
            `VBox(
                `Heading( _("Basic Database Settings") ),
                `HSquash(
                    `VBox (
                        `Left(
                            `ComboBox( `id( `cb_type ), _("Database Type"), [ "hdb", "bdb" ] )
                        ),
                        `Left(
                            `InputField(`id( `te_basedn), `opt(`hstretch, `notify) , _("&Base DN"), "" )
                        ),
                        `VSpacing(0.5),
                        `Left(
                            `VSquash(
                                `HBox(
                                    `InputField( `id( `te_rootdn ), `opt(`hstretch) ,  _("&Administrator DN"),"cn=Administrator" ),
                                    `HSpacing(),
                                    `VBox(
                                        `Bottom(
                                            `CheckBox( `id( `cb_append_basedn ),
                                                    _("A&ppend Base DN"), true )
                                        ),
                                        `VSpacing( 0.3 )
                                    )
                                )
                            )
                        ),
                        `VSpacing(0.5),
                        `Left(
                            `Password( `id( `te_rootpw ), `opt(`hstretch),
                                    _("LDAP Administrator &Password"), "" )
                        ),
                        `Left(
                            `Password( `id( `te_valid_rootpw ), `opt(`hstretch),
                                    _("&Validate Password"), "" )
                        ),
                        `VSpacing(0.5),
                        `VSquash(
                            `HBox(
                                `Left(
                                    `InputField( `id( `te_directory ),`opt(`hstretch, `notify ),
                                            _("&Database Directory") )
                                ),
                                `HSpacing( 0.5 ),
                                `Bottom(
                                    `PushButton( `id( `pb_directory ), _("&Browse...") )
                                )
                            )
                        ),
                        `Left(
                            `CheckBox(`id( `cb_ldapconf), _("Use this database as the default for OpenLDAP clients"), true )
                        )
                    )
                )
            );
        Wizard::SetContentsButtons(caption, addDbWidget, HELPS["database_basic"]:"help not found",
                Label::BackButton(), Label::NextButton());

        boolean append_checked = true;
        if ( createDefaults )
        {
            db = LdapServer::CreateInitialDefaults();
        }
        else
        {
            db=baseDb;
        }

        if( db["rootdn"]:"" != "" )
        {
            integer pos = search( db["rootdn"]:"", db["suffix"]:"" );
            if( pos > -1 )
            {
                db["rootdn"] = substring( db["rootdn"]:"", 0, pos-1 );
            } else
            {
                append_checked = false;
            }
        }
        UI::ChangeWidget(`id( `te_basedn), `Value, db["suffix"]:"" );
        UI::ChangeWidget(`id( `te_rootdn), `Value, db["rootdn"]:"" );
        UI::ChangeWidget(`id( `te_rootpw), `Value, db["rootpw_clear"]:"" );
        UI::ChangeWidget(`id( `te_valid_rootpw), `Value, db["rootpw_clear"]:"" );
        UI::ChangeWidget(`id( `cb_append_basedn), `Value, append_checked );
        UI::ChangeWidget(`id( `te_directory), `Value, db["directory"]:"" );

        if ( numDbs == 0 )
        {
            UI::ChangeWidget(`id( `cb_ldapconf), `Value, true );
        }
        else
        {
            UI::ChangeWidget(`id( `cb_ldapconf), `Value, false );
        }
        symbol ret = `next;
        while(true) {
            ret = (symbol)UI::UserInput();
            if( ret == `pb_directory )
            {
                string name = UI::AskForExistingDirectory( "/var/lib/ldap", _("Select Database Directory") );
                if( name != nil ) UI::ChangeWidget( `te_directory, `Value, name );
                continue;
            }
            else if ( ret == `te_directory )
            {
                user_changed_dbdir = true;
            }
            else if ( ret == `te_basedn )
            {
                if ( ( user_changed_dbdir != true ) && (numDbs > 0) ) {
                    string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
                    suffix = String::Replace(suffix, ",", "_");
                    suffix = String::CutRegexMatch(suffix, "[^0-9a-zA-Z_=-]", true);
                    string dbdir = "/var/lib/ldap/" + suffix;
                    UI::ChangeWidget( `te_directory, `Value, dbdir );
                }
            }
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            if ( ret == `back )
            {
                break;
            }
            if (ret == `next ){
                string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
                string rootdn = String::CutBlanks( (string)UI::QueryWidget( `te_rootdn, `Value ) );
                string rootpw = (string)UI::QueryWidget( `te_rootpw, `Value );
                string directory = String::CutBlanks( (string)UI::QueryWidget( `te_directory, `Value ) );

                //check values
                if( suffix == "" )
                {
                    Popup::Error( _("Base DN must be set.") );
                    continue;
                }

                if ( ! createDefaults )
                {
                    list<map<string, string> > dblist = LdapServer::ReadDatabaseList();
                    boolean exists = false;
                    foreach(map<string, string> db, dblist, {
                        if ( suffix == db["suffix"]:"" )
                        {
                            Popup::Error( _("A database with this Base DN already exists.") );
                            exists = true;
                            break;
                        }
                    } );
                    if ( exists )
                    {
                        continue;
                    }
                }
                db["suffix"] = suffix;
                db["directory"] = directory;
                db["type"] =  (string)UI::QueryWidget( `cb_type, `Value );

                if( rootdn != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
                {
                    rootdn = rootdn+","+suffix;
                }
                if( rootdn != "" )
                {
                    db["rootdn"] = rootdn;
                }
                else
                {
                    if ( haskey(db, "rootdn") )
                        db = remove(db, "rootdn");
                }

                if( rootpw != "" )
                {
                    db["rootpw_clear"] = rootpw;
                    db["pwenctype"] = "SSHA";
                }
                else
                {
                    if ( haskey(db, "rootpw_clear") )
                        db = remove(db, "rootpw_clear");

                    if ( haskey(db, "pwenctype") )
                        db = remove(db, "pwenctype");
                }

                if( db["rootpw_clear"]:"" != "" && db["rootdn"]:"" == "" )
                {
                    Popup::Error( _("Root DN must be set if a password is given.") );
                    continue;
                }
                if( db["rootpw_clear"]:"" != "" && db["rootpw_clear"]:"" != (string)UI::QueryWidget( `te_valid_rootpw, `Value ) )
                {
                    Popup::Error( _("Password validation failed.") );
                    continue;
                }
                if ( ! LdapServer::CheckDatabase( db ) )
                {
                    map<string, string> err = LdapServer::ReadError();
                    Popup::Error( err["msg"]:"" + "\n" + err["details"]:"" );
                    continue;
                }
                integer rc =  LdapServer::CheckSuffixAutoCreate( db["suffix"]:"" );
                if ( rc < 0 )
                {
                    map<string, string> err = LdapServer::ReadError();
                    Popup::Error( err["msg"]:"" + "\n" + err["details"]:"" );
                    continue;
                }
                else if ( rc > 0 )
                {
                    map<string, string> err = LdapServer::ReadError();
                    boolean res = Popup::AnyQuestion(Label::WarningMsg(),
                                        sformat(_("The Base Object: \"%1\" can not be auto created by YaST.\n"), db["suffix"]:"") +
                                        err["msg"]:"",
                                        Label::OKButton(), Label::CancelButton(), `focus);
                    if ( res == false ) {
                        continue;
                    } else {
                        y2debug( "Will not create base objects" );
                        createBase = false;
                    }

                }
                if( db["directory"]:"" == "" )
                {
                    Popup::Error( _("A directory must be specified.") );
                    continue;
                }
                if ( db["directory"]:"" != "/var/lib/ldap" && SCR::Read(.target.dir, db["directory"]:"" ) == nil ) {
                    boolean res = Popup::AnyQuestion(Label::WarningMsg(),
                                        _("The directory does not exist. Create it?"),
                                        Label::YesButton(), Label::NoButton(), `focus);
                    if ( res == false ) {
                        continue;
                    } else {
                        y2debug( "Create dir == true" );
                        createDbDir = true;
                    }
                }



                if( (boolean)UI::QueryWidget( `cb_ldapconf, `Value ) )
                {
                    ldapconf_basedn = suffix;
                }
                baseDb = db;
                break;
            }
        }
        return ret;
    }

    global boolean DbPpolicyRead( integer dbindex )
    {
        map<string,any> ppolicy_map = ppolicyNew;
        if ( dbindex > 0 )
        {
            ppolicy_map = LdapServer::ReadPpolicyOverlay(dbindex);
        }
        if ( size(ppolicy_map) != 0 ){
            UI::ChangeWidget( `cb_ppolicy_overlay, `Value, true );
            boolean pp_hash_cleartext = (boolean)ppolicy_map["hashClearText"]:nil;
            boolean pp_use_lockout = (boolean)ppolicy_map["useLockout"]:nil;
            string pp_default = (string)ppolicy_map["defaultPolicy"]:nil;
            boolean pp_append_checked = false;
            map<string,any> olddb = LdapServer::ReadDatabase(dbindex);
            string suffix =  olddb["suffix"]:"";
            integer pos = search( pp_default, suffix );
            if( pos > -1 )
            {

                string chkSuffix = substring( pp_default, pos );
                if ( chkSuffix == suffix )
                {
                    pp_default = substring( pp_default, 0, pos-1 );
                    pp_append_checked = true;
                }
            }
            if ( pp_hash_cleartext ){
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, true );
            } else {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, false );
            }
            if ( pp_use_lockout ){
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, true );
            } else {
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, false );
            }
            if ( pp_default != "" ){
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, pp_default );
                UI::ChangeWidget( `cb_pp_append_basedn, `Value, pp_append_checked );
            } else {
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, "" );
                UI::ChangeWidget( `cb_pp_append_basedn, `Value, true );
            }
        } else {
            UI::ChangeWidget( `cb_ppolicy_overlay, `Value, false );
            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
            UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
            UI::ChangeWidget( `pb_define_policy, `Enabled , false );
            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
        }
        return true;
    }

    global map<string,any> DbPpolicyWrite(integer dbindex)
    {
        if( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ){
            boolean hashcleartext = (boolean)UI::QueryWidget( `cb_ppolicy_hashcleartext, `Value );
            boolean uselockout = (boolean)UI::QueryWidget( `cb_ppolicy_uselockout, `Value );
            string pp_default = (string)UI::QueryWidget( `te_ppolicy_defaultpolicy, `Value );
            map<string,any> ppolicy = $[];
            if (hashcleartext )
            {
                ppolicy = add( ppolicy, "hashClearText", true);
            }
            else
            {
                ppolicy = add( ppolicy, "hashClearText", false);
            }
            if (uselockout)
            {
                ppolicy = add( ppolicy, "useLockout", true);
            }
            else
            {
                ppolicy = add( ppolicy, "useLockout", false);
            }
            if (pp_default != "" ) {
                map<string,any> db = baseDb;
                if ( dbindex > 0 )
                {
                    db = LdapServer::ReadDatabase(dbindex);
                }
                string suffix =  db["suffix"]:"";
                if( (boolean)UI::QueryWidget( `cb_pp_append_basedn, `Value ) )
                {
                    pp_default = pp_default+","+suffix;
                }
                ppolicy = add( ppolicy, "defaultPolicy", pp_default);
                map<string,any> ppolicyEntry = LdapServer::ReadPpolicyDefault(db["suffix"]:"");
                // User might haved change the Default DN, adjust it
                if ( size(ppolicyEntry) > 0 )
                {
                    ppolicyEntry["dn"] = pp_default;
                    LdapServer::WritePpolicyDefault(db["suffix"]:"",
                                                    ppolicyEntry["dn"]:"",
                                                    ppolicyEntry["ppolicy"]:$[] );
                }
            }
            else
            {
                ppolicy = add( ppolicy, "defaultPolicy", "");
            }
            y2milestone("Policy: %1", ppolicy);
            return ppolicy;
        } else {
            return $[];
        }
    }

    global boolean DbPpolicyInput( symbol handler_cmd, integer dbindex )
    {
        if ( handler_cmd == `cb_ppolicy_overlay )
        {
            if ( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ) {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , true );
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , true );
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , true );
                UI::ChangeWidget( `cb_pp_append_basedn, `Enabled, true );
                if (LdapDatabase::GetCreateBase() ) {
                    UI::ChangeWidget( `pb_define_policy, `Enabled , true );
                }
            } else {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
                UI::ChangeWidget( `cb_pp_append_basedn, `Enabled, false );
                UI::ChangeWidget( `pb_define_policy, `Enabled , false );
            }
        }
        else if ( handler_cmd == `pb_define_policy )
        {
            string pp_default = (string)UI::QueryWidget( `te_ppolicy_defaultpolicy, `Value );

            map<string,any> db = baseDb;
            if (dbindex != -1 )
            {
                db = LdapServer::ReadDatabase(dbindex);
            }
            if( (boolean)UI::QueryWidget( `cb_pp_append_basedn, `Value ) )
            {
                pp_default = pp_default+","+db["suffix"]:"";
            }
            map<string,any> ppolicy = LdapServer::ReadPpolicyDefault(db["suffix"]:"");
            map ppolicyEntry = $[];
            if ( size(ppolicy) > 0 )
            {
               ppolicyEntry = ppolicy["ppolicy"]:$[];
            }
            else if ( dbindex > 0 ) // try to read the ppolicy from the server
            {
                Ldap::Import( $[ "ldap_server" : "localhost",
                                 "bind_dn"    : db["rootdn"]:"" ] );
                Ldap::LDAPInit();
                string pw = "";
                map<string,string> authinfo = LdapServer::ReadAuthInfo( db["suffix"]:"" );
                if ( authinfo != nil )
                {
                    pw = authinfo["bind_pw"]:"";
                }
                string bind_res = "tmp";
                while( bind_res != "" ) {
                    if ( pw == "" ) {
                        pw = Ldap::GetLDAPPassword(false);
                    }
                    bind_res = Ldap::LDAPBind (pw);
                    if (bind_res != "" ) {
                        if (Popup::YesNo( _("Authentication failed. The password is probably incorrect.\n") +
                                          _("The error message was: '") + bind_res + "'\n" +
                                          _("Try again?") ) )
                        {
                            pw = "";
                        } else {
                            break;
                        }
                    }
                }
                if ( bind_res == "" )
                {
                    LdapServer::WriteAuthInfo( db["suffix"]:"",
                                               $[ "bind_dn" : db["rootdn"]:"",
                                                  "bind_pw" : pw ] );

                    list res = (list)SCR::Read (.ldap.search,  $[ "base_dn" : pp_default,
                                                           "filter"  : "objectclass=*",
                                                           "scope"   : 0 ] );
                    if ( size(res) >  0 ) {
                        y2milestone("default_policy does already exist");
                        ppolicyEntry = (map)res[0]:nil;
                    }
                    else
                    {
                        y2milestone("default_policy does not yet exist");
                    }
                }
            }
            map ppolicyEntry_new = PasswordPolicyDialog(ppolicyEntry);
            // PasswordPolicyDialog only returns the changes made to the original
            // Entry, try to merge them here
            foreach ( string key, any val, (map<string,any>) ppolicyEntry_new,
                {
                    ppolicyEntry[key] = val;
                }
            );
            LdapServer::WritePpolicyDefault( db["suffix"]:"", pp_default, (map<string,any>)ppolicyEntry );
        }
        return true;
    }

    global term GetPpolicyWidget()
    {
        return editPolicy;
    }

    global list<string> SelectAttributes( list<string> selected )
    {
        map <string, map<string,boolean> > attrTypes =
                (map<string, map <string,boolean> >) SCR::Read( .ldapserver.schema.attributeTypes );
        list<string> attrs = (list<string>) maplist ( string k, any v, attrTypes, { return k; });
        attrs = lsort(attrs);
        term selectAttrWidget =
            `Top(
                `VBox(
                    `HSpacing(60),
                    `HBox(
                        `VSpacing(15),
                        `SelectionBox( `id( `sb_attr ), _("Available Attribute Types") , attrs ),
                        `VBox(
                            `PushButton( `id( `pb_add), "->" ),
                            `PushButton( `id( `pb_del), "<-" )
                        ),
                        `SelectionBox( `id( `sb_attr_sel ), _("Selected Attribute Types") , selected )
                    ),
                    `PushButton (`id (`ok), Label::OKButton())
                )
            );
        UI::OpenDialog( `opt( `decorated ), selectAttrWidget );
        symbol ret = `next;
        while(true) {
            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            if ( ret == `ok )
            {
                break;
            }
            else if ( ret == `pb_add )
            {
                string toadd = (string) UI::QueryWidget(`sb_attr, `CurrentItem );
                if ( toadd != nil )
                {
                    selected = add(selected, toadd);
                    selected = lsort(selected);
                    attrs = filter( string attr, attrs, { return attr != toadd; });
                    UI::ChangeWidget( `sb_attr_sel, `Items, selected );
                    UI::ChangeWidget( `sb_attr, `Items, attrs );
                }
            }
            else if ( ret == `pb_del )
            {
                string todel = (string) UI::QueryWidget(`sb_attr_sel, `CurrentItem );
                if ( todel != nil )
                {
                    attrs = add(attrs, todel);
                    attrs = lsort(attrs);
                    selected = filter( string attr, selected, { return attr != todel; });
                    UI::ChangeWidget( `sb_attr_sel, `Items, selected );
                    UI::ChangeWidget( `sb_attr, `Items, attrs );
                }
            }

        }
        UI::CloseDialog();
        return selected;
    }

    map<string, string> whatString2Label = $[
        "*"       : _("All Entries"),
        "subtree" : _("All Entries in the Subtree"),
        "base"    : _("The Entry with the DN")
    ];

    map<symbol, list<string> > whoId2String = $[
        `who_all        : [ _("Everybody"), "*" ],
        `who_users      : [ _("Authenticated Clients") , "users" ],
        `who_anon       : [ _("Anonymous Clients"), "anonymous" ],
        `who_self       : [ _("The accessed Entry (self)"), "self" ],
        `who_dn         : [ _("The user with the DN"), "dn.base" ],
        `who_dn_subtree : [ _("All entries in the subtree") , "dn.subtree" ],
        `who_group      : [ _("All members of the group"), "group" ]
    ];
    map<string, symbol> whoString2Id = $[
        "*"             : `who_all,
        "users"         : `who_users,
        "anonymous"     : `who_anon,
        "self"          : `who_self,
        "dn.base"       : `who_dn,
        "dn.subtree"    : `who_dn_subtree,
        "group"         : `who_group
    ];

    map<symbol, list<string> > accessId2String = $[
        `access_empty     :  [ _("<empty>"), ""],
        `access_none     : [ _("No Access"), "none"],
        `access_disclose : [ _("No Access (but disclose information on error)"), "disclose" ],
        `access_auth     : [ _("Authenticate"), "auth" ],
        `access_compare  : [ _("Compare"),  "compare" ],
        `access_read     : [ _("Read"), "read" ],
        `access_write    : [ _("Write"), "write" ],
        `access_manage   : [ _("Manage (full access)"), "manage" ]
    ];

    map<string, symbol> accessString2Id = $[
        ""          : `access_empty,
        "none"      : `access_none,
        "disclose"  : `access_disclose,
        "auth"      : `access_auth,
        "compare"   : `access_compare,
        "read"      : `access_read,
        "write"     : `access_write,
        "manage"    : `access_manage
    ];

    /*
     * Popup to add/edit the acl "by" clauses
     */
    global map AddAclAccess(string suffix, map access)
    {
        list itemlist = [];
        foreach( symbol i, [ `who_all, `who_users, `who_anon, `who_self, `who_dn, `who_dn_subtree, `who_group ],
            {
                itemlist = add(itemlist, `item( `id( i ), whoId2String[i,0]:"" ) );
            }
        );

        list access_itemlist = [];
        foreach( symbol i, [`access_empty, `access_none, `access_disclose, `access_auth, `access_compare, `access_read, `access_write, `access_manage ] ,
            {
                access_itemlist = add(access_itemlist, `item( `id( i ), accessId2String[i,0]:"" ) );
            }
        );

        term widget =
            `VBox(
                `VSpacing(1),
                `HSquash(
                    `VSquash(
                        `VBox(
                            `Left(
                                `ComboBox( `id(`cb_who), `opt(`notify) , _("Who should this rule apply to"), itemlist)
                            ),
                            `Left(
                                `HBox(
                                    `InputField( `id( `te_who_dn ), `opt( `hstretch ), _("Entry DN") ),
                                    `Bottom(
                                        `PushButton( `id( `pb_who ), _("Select") )
                                    )
                                )
                            ),
                            `Left(
                                `ComboBox( `id(`cb_access), _("Define the Access Level"), access_itemlist)
                            ),
                            `RadioButtonGroup(`id(`rbg_aclcontrol),
                                `VBox(
                                    `Left(`RadioButton(`id( "stop" ), _("Stop access control evaluation here (default)"), true )),
                                    `Left(`RadioButton(`id( "break" ), _("Continue with next access control rule (\"break\")") )),
                                    `Left(`RadioButton(`id( "continue" ), _("Continue evaluation of this rule (\"continue\")") ))
                                )
                            ),
                            `HBox(
                                Wizard::CancelOKButtonBox()
                            )
                        )
                    )
                )
            );
        UI::OpenDialog( `opt(`decorated), widget);

        UI::ChangeWidget( `id( `te_who_dn ), `Enabled, false );
        UI::ChangeWidget( `id( `pb_who ), `Enabled, false );

        if ( access != nil )
        {
            UI::ChangeWidget( `id( `cb_who), `Value, access["type"]:`nil );
            UI::ChangeWidget( `id( `cb_access), `Value, access["level"]:`nil );
            UI::ChangeWidget( `id( `rbg_aclcontrol), `CurrentButton, access["control"]:"stop" );
            if ( access["type"]:`nil == `who_dn ||
                 access["type"]:`nil == `who_dn_subtree ||
                 access["type"]:`nil == `who_group )

            {
                UI::ChangeWidget( `id( `pb_who ), `Enabled, true );
                UI::ChangeWidget( `id( `te_who_dn ), `Enabled, true );
                UI::ChangeWidget( `id( `te_who_dn ), `Value, access["value"]:"" );
            }
        }
        symbol ret = `next;
        map res = $[];
        while(true) {
            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            if ( ret == `ok )
            {
                symbol type = (symbol)UI::QueryWidget( `id( `cb_who ), `Value );
                res["type"] = type;

                if ( type == `who_dn || type == `who_dn_subtree || type == `who_group )
                {
                    res["value"] = UI::QueryWidget( `id( `te_who_dn), `Value );
                    if ( res["value"]:"" == "" )
                    {
                        Popup::Error(_("Please enter a DN in the textfield") );
                        continue;
                    }
                    else
                    {
                        if ( ! LdapServer::ValidateDn( res["value"]:"" ) )
                        {
                            Popup::Error( "\"" + res["value"]:"" + "\"" + _("is not a valid LDAP DN") );
                            continue;
                        }
                    }
                }

                res["level"] = UI::QueryWidget( `id( `cb_access ), `Value );
                res["control"] = (string) UI::QueryWidget( `id( `rbg_aclcontrol ), `CurrentButton );

                break;
            }
            else if ( ret == `cancel )
            {
                res = nil;
                break;
            }
            else if ( ret == `cb_who )
            {
                symbol cb_val = (symbol)UI::QueryWidget( `id(`cb_who), `Value );
                if ( cb_val == `who_all || cb_val == `who_users || cb_val == `who_anon || cb_val == `who_self )
                {
                    UI::ChangeWidget( `id( `te_who_dn ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_who ), `Enabled, false );
                }
                else if ( cb_val == `who_dn || cb_val == `who_dn_subtree || cb_val == `who_group )
                {
                    UI::ChangeWidget( `id( `te_who_dn ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_who ), `Enabled, true );
                    if ( cb_val == `who_dn )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Entry DN") );
                    }
                    else if ( cb_val == `who_dn_subtree )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Subtree DN") );
                    }
                    else if ( cb_val == `who_group )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Group DN") );
                    }
                }
            }
            else if ( ret == `pb_who)
            {
                string dn = LdapPopup::InitAndBrowseTree(suffix, $["hostname":"localhost", "port":"389"] );
                UI::ChangeWidget( `id( `te_who_dn ), `Value, dn );
            }
        }
        UI::CloseDialog();
        return res;
    }

    global map AddAclTarget(string suffix, map acl)
    {
        list itemlist = [];
        foreach( string k, string v, whatString2Label,
            {
                itemlist = add(itemlist, `item( `id( k ), v ) );
            }
        );
        term addAclWidget =
            `VBox(
                `Heading( _("Edit Access Control Rule") ),
                `HSquash(
                    `VSquash(
                        `VBox(
                            `Frame( _("Target Objects"),
                                `VBox(
                                    `HBox(
                                        `Left(
                                            `ComboBox( `id(`cb_what), `opt(`notify) , _("Who should this rule apply to"), itemlist)
                                        ),
                                        `InputField( `id( `te_dn ), `opt( `hstretch ), _("Entry DN") ),
                                        `Bottom(
                                            `PushButton( `id( `pb_dn ), _("Select") )
                                        )
                                    ),
                                    `VSpacing(0.5),
                                    `Left(
                                        `VBox(
                                            `Left(
                                                `CheckBox( `id( `cb_filter ), `opt(`notify), _("Matching the filter:") )
                                            ),
                                            `Left(
                                                `InputField( `id( `te_filter ), `opt(`hstretch), _("LDAP Filter") )
                                            )
                                        )
                                    ),
                                    `VSpacing(0.5),
                                    `Left(
                                        `CheckBox( `id( `cb_attrs ), `opt( `notify ), _("Apply this rule only to the listed attribute") )
                                    ),
                                    `HBox(
                                        `Left(
                                            `InputField( `id( `te_attrs ), `opt(`hstretch), _("Attributes") )
                                        ),
                                        `Bottom(
                                            `PushButton( `id( `pb_attrs ), _("Edit") )
                                        )
                                    )
                                )
                            ),
                            `VSpacing(0.5),
                            `Frame( _("Access Level"),
                                `VBox(
                                    `HBox(
                                        `MinSize( 60, 7,
                                            `Table( `id( `tab_access ),`opt(`keepSorting), `header(_("Who"), _("DN"),_("Access Level"), _("Flow Control") ) )
                                        ),
                                        `VBox(
                                            `PushButton( `id (`pb_up ), _("Up") ),
                                            `PushButton( `id (`pb_down ), _("Down") )
                                        )
                                    ),
                                    `Left(
                                        `HBox(
                                            `PushButton( `id (`pb_add ), Label::AddButton() ),
                                            `PushButton( `id (`pb_edit ), Label::EditButton() ),
                                            `PushButton( `id (`pb_del ), Label::DeleteButton() )
                                        )
                                    )
                                )
                            ),
                            `VSpacing(1),
                            `HBox(
                                Wizard::CancelOKButtonBox()
                            )
                        )
                    )
                )
            );

        UI::OpenDialog(`opt( `decorated ), addAclWidget );

        if ( acl != nil )
        {
            UI::ChangeWidget( `id( `cb_what ), `Value, acl["target","what"]:"*" );
            if ( acl["target","what"]:"" == "base" )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`pb_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`te_dn ), `Value, acl["target","dn"]:"" );
            }
            else if ( acl["target","what"]:"" == "subtree" )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`te_dn ), `Value, acl["target","dn"]:"" );
                UI::ChangeWidget( `id (`te_dn ), `Label, _("Subtree DN") );
            }
            else if ( acl["target","what"]:"" == "*" )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, false );
                UI::ChangeWidget( `id (`pb_dn ), `Enabled, false );
            }
            if ( acl["target","filter"]:"" != "" )
            {
                UI::ChangeWidget( `id( `cb_filter ), `Value, true );
                UI::ChangeWidget( `id( `te_filter ), `Enabled, true );
                UI::ChangeWidget( `id( `te_filter ), `Value, acl["target","filter"]:"" );
            }
            else
            {
                UI::ChangeWidget( `id( `cb_filter ), `Value, false );
                UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
            }
            if ( acl["target","attrs"]:"" != "" )
            {
                UI::ChangeWidget( `id( `cb_attrs ), `Value, true );
                UI::ChangeWidget( `id( `te_attrs ), `Enabled, true );
                UI::ChangeWidget( `id( `pb_attrs ), `Enabled, true );
                UI::ChangeWidget( `id( `te_attrs ), `Value, acl["target","attrs"]:"" );
            }
            else
            {
                UI::ChangeWidget( `id( `cb_attrs ), `Value, false );
                UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
            }
        }
        else
        {
            UI::ChangeWidget( `id( `te_dn ), `Enabled, false );
            UI::ChangeWidget( `id( `pb_dn ), `Enabled, false );
            UI::ChangeWidget( `id( `cb_what ), `Value, "*" );
            UI::ChangeWidget( `id( `cb_filter ), `Value, false );
            UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
            UI::ChangeWidget( `id( `cb_attrs ), `Value, false );
            UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
            UI::ChangeWidget( `id( `pb_attrs ), `Enabled, false );
        }

        symbol ret = `next;
        map result = $[];
        list<map> accesslist = acl["access"]:[];
        boolean updateTable = true;
        integer selected = 0;
        while(true) {
            if ( updateTable )
            {
                integer pos = -1;
                list itemlist = maplist (map v, accesslist,
                    {
                        pos=pos+1;
                        return `item(
                                    `id(pos),
                                    whoId2String[v["type"]:`none,0]:"",
                                    v["value"]:"",
                                    accessId2String[v["level"]:`none,0]:"",
                                    v["control"]:"stop"
                                );
                    }
                );
                UI::ChangeWidget( `tab_access, `Items, itemlist) ;
                UI::ChangeWidget(`id(`tab_access), `CurrentItem, selected );
                updateTable = false;
            }

            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            selected = (integer)UI::QueryWidget( `id( `tab_access ), `CurrentItem );
            if ( ret == `ok )
            {
                map what = $[];
                what["what"] = UI::QueryWidget( `id( `cb_what ), `Value );
                what["dn"] = UI::QueryWidget( `id( `te_dn ), `Value );
                if ( (what["what"]:"" == "base" || what["what"]:"" == "subtree" ) )
                {
                    if ( ! LdapServer::ValidateDn( what["dn"]:"" ) )
                    {
                        Popup::Error( "\"" + what["dn"]:"" + "\"" + _("is not a valid LDAP DN") );
                        continue;
                    }
                }
                if ( (boolean)UI::QueryWidget( `id( `cb_attrs ), `Value ) )
                {
                    if ( "" != (string)UI::QueryWidget( `id( `te_attrs ), `Value ) )
                    {
                        // FIXME: Validate attribute types
                        what["attrs"] = UI::QueryWidget( `id( `te_attrs ), `Value );
                    }
                    else
                    {
                        Popup::Error(_("Enter a list of valid attributes in the <b>Attributes</b> textfield") );
                        continue;
                    }
                }

                if ( (boolean)UI::QueryWidget( `id( `cb_filter ), `Value ) )
                {
                    if ( "" != UI::QueryWidget( `id( `te_filter ), `Value ) )
                    {
                        what["filter"] = UI::QueryWidget( `id( `te_filter ), `Value );
                    }
                    else
                    {
                        Popup::Error(_("Enter valid a LDAP filter in the textfield") );
                        continue;
                    }
                }
                if ( size(accesslist) == 0 )
                {
                    Popup::Error(_("You must add at least one item to the \"Access Level\" list.") );
                    continue;
                }


                result["target"] = what;
                result["access"] = accesslist;
                y2milestone("New ACL: %1", result);
                break;
            }
            else if ( ret == `cancel )
            {
                result = nil;
                break;
            }
            else if ( ret == `cb_what )
            {
                string cb_val = (string)UI::QueryWidget( `id(`cb_what), `Value );
                if ( cb_val == "*" )
                {
                    UI::ChangeWidget( `id( `te_dn ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_dn ), `Enabled, false );
                }
                else if ( cb_val == "base" || cb_val == "subtree" )
                {
                    UI::ChangeWidget( `id( `te_dn ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_dn ), `Enabled, true );
                    if ( cb_val == "subtree" )
                    {
                        UI::ChangeWidget( `id( `te_dn ), `Label, _("Subtree DN") );
                    }
                    else
                    {
                        UI::ChangeWidget( `id( `te_dn ), `Label, _("Entry DN") );
                    }
                }
            }
            else if ( ret == `pb_dn )
            {
                string dn = LdapPopup::InitAndBrowseTree(suffix, $["hostname":"localhost", "port":"389"] );
                UI::ChangeWidget( `id( `te_dn ), `Value, dn );
            }
            else if ( ret == `cb_filter )
            {
                if ( (boolean) UI::QueryWidget( `id(`cb_filter), `Value ) )
                {
                    UI::ChangeWidget( `id( `te_filter ), `Enabled, true );
                }
                else
                {
                    UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
                }
            }
            else if ( ret == `cb_attrs )
            {
                if ( (boolean) UI::QueryWidget( `id(`cb_attrs ), `Value ) )
                {
                    UI::ChangeWidget( `id( `te_attrs ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_attrs ), `Enabled, true );
                }
                else
                {
                    UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_attrs ), `Enabled, false );
                }
            }
            else if (ret == `pb_attrs )
            {
                string attr_string = (string)UI::QueryWidget( `id( `te_attrs ), `Value );
                list<string> attrs = splitstring( attr_string, "," );
                attrs = SelectAttributes(attrs);
                attr_string = mergestring(attrs, "," );
                UI::ChangeWidget( `id( `te_attrs ), `Value, attr_string );
            }
            else if ( ret == `pb_add )
            {
                map access = AddAclAccess(suffix, nil );
                if ( access != nil )
                {
                    accesslist = add(accesslist, access);
                    updateTable = true;
                }
            }
            else if ( ret == `pb_edit )
            {
                if ( selected != nil )
                {
                    map access = accesslist[selected]:nil;
                    access = AddAclAccess(suffix, access);
                    if ( access != nil )
                    {
                        accesslist[selected] = access;
                        updateTable = true;
                    }
                }
            }
            else if ( ret == `pb_del )
            {
                if ( selected != nil )
                {
                    accesslist = remove(accesslist, selected);
                    updateTable = true;
                }
            }
            else if ( ret == `pb_up )
            {
                if ( selected != nil &&  selected > 0 )
                {
                    integer newIndex = selected - 1;
                    map oldItem = accesslist[newIndex]:nil;
                    accesslist[newIndex] = accesslist[selected]:nil;
                    accesslist[selected] = oldItem;
                    updateTable = true;
                    selected = newIndex;
                }
            }
            else if ( ret == `pb_down )
            {
                if ( selected != nil &&  selected < (size(accesslist)-1) )
                {
                    integer newIndex = selected + 1;
                    map oldItem = accesslist[newIndex]:nil;
                    accesslist[newIndex] = accesslist[selected]:nil;
                    accesslist[selected] = oldItem;
                    updateTable = true;
                    selected = newIndex;
                }
            }
        }
        UI::CloseDialog();
        return result;
    }

    global term GetAclWidget()
    {
        term aclList =
            `VBox(
                `VSpacing(1),
                `VBox(
                    `HBox(
                        `MinSize( 60, 7,
                            `Table( `id( `tab_acl ),`opt(`keepSorting), `header(_("Target"), _("DN"), _("Filter"), _("Attributes") ) )
                        ),
                        `VBox(
                            `PushButton( `id (`pb_up ), _("Up") ),
                            `PushButton( `id (`pb_down ), _("Down") )
                        )
                    ),
                    `Left(
                        `HBox(
                            `PushButton( `id (`pb_add ), Label::AddButton() ),
                            `PushButton( `id (`pb_edit ),Label::EditButton() ),
                            `PushButton( `id (`pb_del ), Label::DeleteButton() )
                        )
                    )
                )
            );
        return aclList;
    }


    global boolean DbAclRead( integer dbindex, list<map> readAcls )
    {
        acllist = [];
        if ( readAcls == nil )
        {
            y2milestone("Unparseable ACLs");
            acllist = nil;
            UI::ChangeWidget( `id(`tab_acl), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_add), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_del), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_edit), `Enabled, false) ;
            Popup::Error(_("The selected database contains access control rules that are currently
not supported by YaST. The Access Control Dialog will be disabled.
") );
        }
        else
        {
            foreach( map acl, readAcls,
                {
                    map targetMap = acl["target"]:$[];
                    map resMap =$[];
                    resMap["target"] = $[];
                    resMap["access"] = [];
                    if ( size(targetMap) == 0 )
                    {
                        resMap["target", "what"] = "*";
                    }
                    else
                    {
                        map dnMap = targetMap["dn"]:$[];
                        if (size(dnMap) > 0)
                        {
                           resMap["target", "what"] = dnMap["style"]:"";
                           resMap["target", "dn"] = dnMap["value"]:"";
                        }
                        else
                        {
                            resMap["target", "what"] = "*";
                        }
                        resMap["target", "filter"] = targetMap["filter"]:"";
                        resMap["target", "attrs"] = targetMap["attrs"]:"";
                    }
                    list<map> accessList = [];
                    foreach( map access, acl["access"]:[],
                        {
                            map<string,any> accessMap = $[];
                            accessMap["level"] = accessString2Id[access["level"]:""]:`access_none;
                            accessMap["type"] = whoString2Id[access["type"]:""]:`nil;
                            accessMap["value"] = access["value"]:"";
                            accessMap["control"] = access["control"]:"";
                            accessList = add( accessList, accessMap );
                        }
                    );
                    resMap["access"] = accessList;
                    acllist = add( acllist, resMap );
                }
            );
            integer pos = -1;
            list itemlist = maplist (map v, acllist,
                {
                    pos=pos+1;
                    string dn="";
                    if ( ( v["target","what"]:"*" != "*") && ( v["target","dn"]:"" == "" ) )
                    {
                        dn = "<Root-DSE>";
                    }
                    else
                    {
                        dn = v["target","dn"]:"";
                    }
                    return `item( `id(pos),
                                  whatString2Label[v["target","what"]:""]:"",
                                  dn,
                                  v["target","filter"]:"",
                                  v["target","attrs"]:"All Attributes"
                                );
                }
            );
            UI::ChangeWidget( `tab_acl, `Items, itemlist) ;
        }
        return true;
    }

    global list<map> DbAclWrite( integer dbindex )
    {
        if ( acllist == nil )
        {
            return nil;
        }

        list<map> outlist = [];
        foreach( map acl, acllist,
            {
                y2milestone( "------------------------------" );
                y2milestone( "ACL Target: %1", acl["target","what"]:"<nul>");
                map targetmap = $[];
                if ( acl["target","what"]:"*" != "*" )
                {
                    map dn = $[
                        "style" : acl["target","what"]:"",
                        "value" : acl["target","dn"]:""
                    ];
                    targetmap["dn"] = dn;
                }
                if ( acl["target","filter"]:"" != "" )
                {
                    targetmap["filter"] = acl["target","filter"]:"";
                }
                if ( acl["target","attrs"]:"" != "" )
                {
                    targetmap["attrs"] = acl["target","attrs"]:"";
                }
                y2milestone( "ACL Target: %1", targetmap );
                list<map> outlist_access = [];
                foreach( map access, acl["access"]:[],
                    {
                        access["level"] = accessId2String[access["level"]:`nil,1]:"none";
                        access["type"] = whoId2String[access["type"]:`nil,1]:"";
                        y2milestone( "ACL Access: %1", access );
                        outlist_access = add(outlist_access, access );
                    }
                );
                outlist = add(outlist, $[ "target" : targetmap, "access" : outlist_access ] );
            }
        );
        return outlist;
    }

    global boolean DbAclInput( symbol handler_cmd, integer dbindex )
    {
        map db = $[];
        if ( dbindex >= 0 )
        {
            db = LdapServer::ReadDatabase(dbindex);
        }
        string suffix =  db["suffix"]:"";
        y2milestone("suffix: %1", suffix);
        boolean updateTable = false;

        integer selected = (integer)UI::QueryWidget( `id( `tab_acl ), `CurrentItem );

        if ( handler_cmd == `pb_add )
        {
            map aclmap = AddAclTarget(suffix, nil);
            if (aclmap != nil )
            {
                acllist = add(acllist, aclmap);
                updateTable = true;
            }
        }
        else if ( handler_cmd == `pb_del )
        {
            if ( selected != nil )
            {
                acllist = remove(acllist, selected);
                updateTable = true;
                selected = 0;
            }
        }
        else if ( handler_cmd == `pb_edit )
        {
            if ( selected != nil )
            {
                map aclmap = acllist[selected]:nil;
                aclmap = AddAclTarget(suffix, aclmap );
                if (aclmap != nil )
                {
                    acllist[selected] = aclmap;
                    updateTable = true;
                }
            }
        }
        else if ( handler_cmd == `pb_up )
        {
            if ( selected != nil &&  selected > 0 )
            {
                integer newIndex = selected - 1;
                map oldItem = acllist[newIndex]:nil;
                acllist[newIndex] = acllist[selected]:nil;
                acllist[selected] = oldItem;
                updateTable = true;
                selected = newIndex;
            }
        }
        else if ( handler_cmd == `pb_down )
        {
            if ( selected != nil &&  selected < (size(acllist)-1) )
            {
                integer newIndex = selected + 1;
                map oldItem = acllist[newIndex]:nil;
                acllist[newIndex] = acllist[selected]:nil;
                acllist[selected] = oldItem;
                updateTable = true;
                selected = newIndex;
            }
        }

        if ( updateTable )
        {
            integer pos = -1;
            list itemlist = maplist (map v, acllist,
                {
                    pos=pos+1;
                    string dn="";
                    if ( ( v["target","what"]:"*" != "*") && ( v["target","dn"]:"" == "" ) )
                    {
                        dn = "<Root-DSE>";
                    }
                    else
                    {
                        dn = v["target","dn"]:"";
                    }
                    return `item( `id(pos),
                                  whatString2Label[v["target","what"]:""]:"",
                                  dn,
                                  v["target","filter"]:"",
                                  v["target","attrs"]:"All Attributes"
                                );
                }
            );
            UI::ChangeWidget( `tab_acl, `Items, itemlist) ;
            UI::ChangeWidget(`id(`tab_acl), `CurrentItem, selected );
        }
        return true;
    }

    global term GetSyncConsWidget()
    {
        term widget =
            `Top(
                `ReplacePoint( `id( `syncConsWidget ),
                    `HSquash(
                        `VBox(
                            `VSpacing(0.5),
                            `Left(
                                `CheckBox( `id( `cb_syncrepl ), `opt(`notify), _("This database is a Replication Consumer."), false )
                            ),
                            `VSpacing(0.3),
                            `VBox( `id( `f_synccons ),
                                `Left(
                                    `VSquash(
                                        `HBox(
                                            `ComboBox( `id( `cb_sync_prot ), `opt(`notify), _("Protocol"), [ "ldap", "ldaps" ] ),
                                            `HSpacing(),
                                            `InputField( `id( `te_sync_target ), `opt(`hstretch), _("Provider Name"), "" ),
                                            `HSpacing(),
                                            `HSquash(
                                                `IntField( `id(`if_sync_port), _("Port"), 0, 65536, 389)
                                            ),
                                            `HSpacing(),
                                            `VBox(
                                                `Bottom(
                                                    `CheckBox( `id( `cb_start_tls ), _("Use StartTLS"), true )
                                                ),
                                                `VSpacing(0.3)
                                            )
                                        )
                                    )
                                ),
                                `VSpacing(0.3),
                                `Left(
                                    `HBox(
                                        `ComboBox( `id( `cb_sync_type ), `opt(`notify),
                                                    _("Replication Type"), [ "refreshAndPersist", "refreshOnly" ] ),
                                        `HSpacing(),
                                        `VSquash(
                                            `HBox( `id( `hb_rep_interval ),
                                                `VBox(
                                                    `Bottom(
                                                        `Label( _("Replication Interval") )
                                                    )
                                                ),
                                                `HSpacing(),
                                                `HSquash(
                                                    `IntField( `id(`if_sync_int_d), _("Days"), 0, 99, 0)
                                                ),
                                                `HSpacing(),
                                                `HSquash(
                                                    `IntField( `id(`if_sync_int_h), _("Hours"), 0, 23, 0)
                                                ),
                                                `HSpacing(),
                                                `HSquash(
                                                    `IntField( `id(`if_sync_int_m), _("Minutes"), 0, 59, 0)
                                                ),
                                                `HSpacing(),
                                                `HSquash(
                                                    `IntField( `id(`if_sync_int_s), _("Seconds"), 0, 59, 0)
                                                ),
                                                `HStretch()
                                            )
                                        )
                                    )
                                ),
                                `VSpacing(0.3),
                                `Left(
                                    `HBox(
                                        `InputField( `id( `te_sync_binddn ), `opt(`hstretch), _("Authentication DN"), "" ),
                                        `HSpacing(),
                                        `Password( `id( `te_sync_cred ), `opt(`hstretch), _("Password"), "" )
                                    )
                                ),
                                `VSpacing(0.3),
                                `Left(
                                    `VSquash(
                                        `HBox(
                                            `VBox(
                                                `Bottom(
                                                    `CheckBox( `id( `cb_update_ref ), `opt(`notify), _("Custom update referral") )
                                                ),
                                                `VSpacing(0.3)
                                            ),
                                            `HSpacing(),
                                            `ComboBox( `id( `cb_updateref_prot ), `opt(`notify), _("Protocol"), [ "ldap", "ldaps" ] ),
                                            `HSpacing(),
                                            `InputField( `id( `te_updateref_target ), `opt(`hstretch), _("Target Host"), "" ),
                                            `HSpacing(),
                                            `HSquash(
                                                `IntField( `id(`if_updateref_port), _("Port"), 0, 65536, 389)
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        return widget;
    }

    boolean urlComponentsMatch( map url1, map url2 )
    {
        if ( (string)url1["protocol"]:"" != (string)url2["protocol"]:"" )
        {
            return false;
        }
        if ( (string)url1["target"]:"" != (string)url2["target"]:"" )
        {
            return false;
        }
        if ( (integer)url1["port"]:0 != (integer)url2["port"]:0 )
        {
            return false;
        }
        return true;
    }

    global boolean DbSyncConsRead( integer index, map synccons, map updateref )
    {
        y2milestone("DbSyncConsRead %1", index);
        if ( size(synccons) == 0 )
        {
            UI::ChangeWidget( `f_synccons, `Enabled, false );
        }
        else
        {
            UI::ChangeWidget( `f_synccons, `Enabled, true );
            UI::ChangeWidget( `cb_syncrepl, `Value, true );
            map<string,any> provider = synccons["provider"]:$[];
            UI::ChangeWidget( `te_sync_target, `Value, (string)provider["target"]:"");
            UI::ChangeWidget( `cb_sync_prot, `Value, (string)provider["protocol"]:"");
            if ( (string)provider["protocol"]:"" == "ldaps")
            {
                UI::ChangeWidget( `cb_start_tls, `Value, false );
                UI::ChangeWidget( `cb_start_tls, `Enabled, false );
            }
            else
            {
                UI::ChangeWidget( `cb_start_tls, `Value, (boolean)synccons["starttls"]:true );
            }
            UI::ChangeWidget( `if_sync_port, `Value, (integer)provider["port"]:0);
            UI::ChangeWidget( `cb_sync_type, `Value, (string)synccons["type"]:"");
            if ( (string)synccons["type"]:"" == "refreshAndPersist" )
            {
                UI::ChangeWidget( `hb_rep_interval, `Enabled, false );
            }
            else
            {
                UI::ChangeWidget( `if_sync_int_d, `Value, (integer)synccons["interval","days"]:0 );
                UI::ChangeWidget( `if_sync_int_h, `Value, (integer)synccons["interval","hours"]:0 );
                UI::ChangeWidget( `if_sync_int_m, `Value, (integer)synccons["interval","mins"]:0 );
                UI::ChangeWidget( `if_sync_int_s, `Value, (integer)synccons["interval","secs"]:0 );
            }
            UI::ChangeWidget( `te_sync_binddn, `Value, (string)synccons["binddn"]:"");
            UI::ChangeWidget( `te_sync_cred, `Value, (string)synccons["credentials"]:"");
            if (size(updateref) == 0 )
            {
                // no updateref
                UI::ChangeWidget( `cb_update_ref, `Value, true );
                UI::ChangeWidget( `te_updateref_target, `Value, "" );
            }
            else if ( urlComponentsMatch( provider, updateref )  )
            {
                UI::ChangeWidget( `cb_update_ref, `Value, false );
                UI::ChangeWidget( `cb_updateref_prot, `Enabled, false );
                UI::ChangeWidget( `te_updateref_target, `Enabled, false );
                UI::ChangeWidget( `if_updateref_port, `Enabled, false );
            }
            else
            {
                UI::ChangeWidget( `cb_update_ref, `Value, true );
                UI::ChangeWidget( `cb_updateref_prot, `Value, (string)updateref["protocol "]:"ldap" );
                UI::ChangeWidget( `te_updateref_target, `Value, (string)updateref["target"]:"" );
                UI::ChangeWidget( `if_updateref_port, `Value, (integer)updateref["port"]:389 );
            }
        }
        return true;
    }

    global boolean DbSyncConsInput( symbol handler_cmd, integer index )
    {
        y2milestone("DbSyncConsInput %1 %2", handler_cmd, index);
        if ( handler_cmd == `cb_syncrepl )
        {
            if ( UI::QueryWidget( `cb_syncrepl, `Value ) == true )
            {
                UI::ChangeWidget( `f_synccons, `Enabled, true );
                if ( (boolean)UI::QueryWidget( `cb_update_ref, `Value ) == true )
                {
                    UI::ChangeWidget( `te_updateref_target, `Enabled, true );
                    UI::ChangeWidget( `cb_updateref_prot, `Enabled, true );
                    UI::ChangeWidget( `if_updateref_port, `Enabled, true );
                    UI::ChangeWidget( `te_updateref_target, `Value, "" );
                }
                else
                {
                    UI::ChangeWidget( `te_updateref_target, `Enabled, false );
                    UI::ChangeWidget( `cb_updateref_prot, `Enabled, false );
                    UI::ChangeWidget( `if_updateref_port, `Enabled, false );
                    UI::ChangeWidget( `te_updateref_target, `Value, "" );
                }
            }
            else
            {
                UI::ChangeWidget( `f_synccons, `Enabled, false );
            }
        }
        if ( handler_cmd == `cb_sync_prot )
        {
                string prot = (string) UI::QueryWidget( `cb_sync_prot, `Value );
                integer port = (integer) UI::QueryWidget( `if_sync_port, `Value );
                if ( prot == "ldaps" )
                {
                    UI::ChangeWidget( `cb_start_tls, `Value, false );
                    UI::ChangeWidget( `cb_start_tls, `Enabled, false );
                    if ( port == 389 )
                    {
                        UI::ChangeWidget( `if_sync_port, `Value, 636 );
                    }
                }
                else
                {
                    UI::ChangeWidget( `cb_start_tls, `Value, true );
                    UI::ChangeWidget( `cb_start_tls, `Enabled, true );
                    if ( port == 636 )
                    {
                        UI::ChangeWidget( `if_sync_port, `Value, 389 );
                    }
                }
        }
        if ( handler_cmd == `cb_update_ref )
        {
            if ( (boolean)UI::QueryWidget( `cb_update_ref, `Value ) == true )
            {
                UI::ChangeWidget( `te_updateref_target, `Enabled, true );
                UI::ChangeWidget( `cb_updateref_prot, `Enabled, true );
                UI::ChangeWidget( `if_updateref_port, `Enabled, true );
                UI::ChangeWidget( `te_updateref_target, `Value, "" );
            }
            else
            {
                UI::ChangeWidget( `te_updateref_target, `Enabled, false );
                UI::ChangeWidget( `cb_updateref_prot, `Enabled, false );
                UI::ChangeWidget( `if_updateref_port, `Enabled, false );
                UI::ChangeWidget( `te_updateref_target, `Value, "" );
            }
        }
        if ( handler_cmd == `cb_updateref_prot )
        {
                string prot = (string) UI::QueryWidget( `cb_updateref_prot, `Value );
                integer port = (integer) UI::QueryWidget( `if_updateref_port, `Value );
                if ( prot == "ldaps" )
                {
                    if ( port == 389 )
                    {
                        UI::ChangeWidget( `if_updateref_port, `Value, 636 );
                    }
                }
                else
                {
                    if ( port == 636 )
                    {
                        UI::ChangeWidget( `if_updateref_port, `Value, 389 );
                    }
                }
        }
        if ( (string)UI::QueryWidget( `cb_sync_type, `Value ) == "refreshAndPersist" )
        {
                UI::ChangeWidget( `hb_rep_interval, `Enabled, false );
        }
        else
        {
                UI::ChangeWidget( `hb_rep_interval, `Enabled, true );
        }

        return true;
    }

    global boolean DbSyncConsCheck( integer index )
    {
        y2milestone("DbSyncConsCheck %1", index);
        if ( UI::QueryWidget( `cb_syncrepl, `Value ) == true )
        {
            if ( (string)UI::QueryWidget( `cb_sync_type, `Value ) == "refreshOnly" )
            {
                integer days = (integer)UI::QueryWidget( `if_sync_int_d, `Value );
                integer hours = (integer)UI::QueryWidget( `if_sync_int_h, `Value );
                integer mins = (integer)UI::QueryWidget( `if_sync_int_m, `Value );
                integer secs = (integer)UI::QueryWidget( `if_sync_int_s, `Value );
                if(days == 0 && hours == 0 && mins == 0 && secs == 0 )
                {
                    Popup::Error( _("Invalid replication interval specified") );
                    return false;
                }
            }
            string prot = (string)UI::QueryWidget( `cb_sync_prot, `Value );
            string target = (string)UI::QueryWidget( `te_sync_target, `Value );
            integer port = (integer)UI::QueryWidget( `if_sync_port, `Value );

            // test connection
            map<string,any> provider = $[
                    "protocol" : prot,
                    "target"   : target,
                    "port"     : port
                ];
            map db = baseDb;
            if ( index >= 0)
            {
                db = LdapServer::ReadDatabase(index);
            }
            string suffix = (string)db["suffix"]:"";
            map<string,any> testparm = $[];
            testparm = add(testparm, "target", provider );
            testparm = add(testparm, "starttls", (boolean)UI::QueryWidget(`cb_start_tls, `Value) );
            testparm = add(testparm, "binddn", (string)UI::QueryWidget(`te_sync_binddn, `Value) );
            testparm = add(testparm, "credentials", (string)UI::QueryWidget(`te_sync_cred, `Value) );
            testparm = add(testparm, "basedn", suffix );
            if(!(boolean)SCR::Execute( .ldapserver.remoteBindCheck, testparm ) )
            {
                map<string,any> err = SCR::Error(.ldapserver);
                return Popup::ContinueCancelHeadline( _("Checking LDAP connectivity to the provider failed."),
                                               _("The test returned the following error messages:")
                                               + "\n\n\"" +
                                               (string)err["summary"]:"" + "\"\n\"" + (string)err["description"]:""
                                               + "\"\n\n" +
                                               _("Do you still want to continue?"));
            }
            if(!(boolean)SCR::Execute( .ldapserver.remoteLdapSyncCheck, testparm ) )
            {
                map<string,any> err = SCR::Error(.ldapserver);
                return Popup::ContinueCancelHeadline( _("Checking the LDAPsync capabilities of the provider failed."),
                                               _("Please verify that the target server is enabled to be a LDAPsync provider")
                                               + "\n\n" +
                                               _("The test returned the following error messages:")
                                               + "\n\"" +
                                               (string)err["summary"]:""+ "\"\n\"" + (string)err["description"]:""
                                               + "\"\n\n" +
                                               _("Do you still want to continue?"));
            }
        }
        return true;
    }

    global map<string,any> DbSyncConsWrite( integer index )
    {
        y2milestone("DbSyncConsWrite %1", index);
        map<string,any> syncrepl = $[];
        map<string,any> updateref = $[];
        if ( UI::QueryWidget( `cb_syncrepl, `Value ) == true )
        {
            string prot = (string)UI::QueryWidget( `cb_sync_prot, `Value );
            string target = (string)UI::QueryWidget( `te_sync_target, `Value );
            integer port = (integer)UI::QueryWidget( `if_sync_port, `Value );
            map<string,any> provider = $[
                    "protocol" : prot,
                    "target"   : target,
                    "port"     : port
                ];
            syncrepl = add(syncrepl, "provider", provider );
            syncrepl = add(syncrepl, "starttls", (boolean)UI::QueryWidget(`cb_start_tls, `Value) );

            string type = (string)UI::QueryWidget( `cb_sync_type, `Value );
            syncrepl = add(syncrepl, "type", type );

            if ( type == "refreshOnly" )
            {
                map<string,integer> iv = $[
                        "days" : (integer)UI::QueryWidget( `if_sync_int_d, `Value ),
                        "hours" : (integer)UI::QueryWidget( `if_sync_int_h, `Value ),
                        "mins" : (integer)UI::QueryWidget( `if_sync_int_m, `Value ),
                        "secs" : (integer)UI::QueryWidget( `if_sync_int_s, `Value ),
                    ];
                syncrepl = add( syncrepl, "interval", iv );
            }
            map db = baseDb;
            if ( index >= 0)
            {
                db = LdapServer::ReadDatabase(index);
            }
            string basedn = (string)db["suffix"]:"";
            string binddn = (string)UI::QueryWidget( `te_sync_binddn, `Value );
            string cred = (string)UI::QueryWidget( `te_sync_cred, `Value );
            syncrepl = add(syncrepl, "basedn", basedn );
            syncrepl = add(syncrepl, "binddn", binddn );
            syncrepl = add(syncrepl, "credentials", cred );
            if ( (boolean) UI::QueryWidget( `cb_update_ref, `Value) )
            {
                if ( (string)UI::QueryWidget(`te_updateref_target, `Value) != "" )
                {
                    updateref = add(updateref, "protocol", (string)UI::QueryWidget(`cb_updateref_prot, `Value) );
                    updateref = add(updateref, "target", (string)UI::QueryWidget(`te_updateref_target, `Value) );
                    updateref = add(updateref, "port", (integer)UI::QueryWidget(`if_updateref_port, `Value) );
                }
            }
            else
            {
                updateref = provider;
            }
        }
        y2milestone("DbSyncConsWrite syncrepl: %1", syncrepl);
        return $[ "syncrepl" : syncrepl, "updateref" : updateref ];
    }

    global term GetSyncProvWidget()
    {
        term widget =
            `Top(
                `VBox(
                    `VSpacing(1),
                    `VBox(
                        `HBox(
                            `CheckBox( `id( `cb_synprov_enable ),`opt(`notify ),
                                _("Enable ldapsync provider for this database"), false
                            ),
                            `HSpacing( `opt(`hstretch))
                        ),
                        `VSpacing(0.5),
                        `Frame(  `id( `f_sync_settings ), _("Checkpoint Settings"),
                            `VBox(
                                `HBox(
                                    `HSquash(
                                        `IntField( `id( `if_syncprov_checkpoint_ops ),
                                            _("Operations"), 0, 2000000000,0
                                        )
                                    ),
                                    `HSpacing( 1 ),
                                    `HSquash(
                                        `IntField( `id( `if_syncprov_checkpoint_min ),
                                            _("Minutes"), 0, 2000000000,0
                                        )
                                    ),
                                    `HStretch()
                                )
                            )
                        ),
                        `VSpacing(0.5),
                        `Frame( `id( `f_sync_slog ), _("Session Log"),
                            `VBox(
                                `Left(
                                    `CheckBox( `id( `cb_sync_slog ), `opt(`notify),
                                        _("Enable Session Log") )
                                ),
                                `Left(
                                    `HSquash(
                                        `IntField( `id( `if_syncprov_sessionlog ),
                                                _("Operations"), 0, 2000000000, 0
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        return widget;
    }

    global boolean DbSyncProvRead( symbol handler_cmd, integer index, map syncprov )
    {
        y2milestone("DbSyncProvRead %1 %2", handler_cmd, index );
        if ( size(syncprov) == 0 )
        {
            UI::ChangeWidget( `cb_synprov_enable, `Value, false );
            UI::ChangeWidget( `f_sync_settings, `Enabled , false );
            UI::ChangeWidget( `f_sync_slog, `Enabled , false );
        }
        else
        {
            UI::ChangeWidget( `cb_synprov_enable, `Value, true );
            if ( syncprov["checkpoint"]:nil != nil )
            {
                UI::ChangeWidget( `if_syncprov_checkpoint_ops, `Value , (integer)syncprov["checkpoint","ops"]:0 );
                UI::ChangeWidget( `if_syncprov_checkpoint_min, `Value , (integer)syncprov["checkpoint","min"]:0 );
            }
            if ( syncprov["sessionlog"]:nil != nil )
            {
                UI::ChangeWidget( `cb_sync_slog, `Value, true );
                UI::ChangeWidget( `if_syncprov_sessionlog, `Value, (integer)syncprov["sessionlog"]:0 );
            }
            else
            {
                UI::ChangeWidget( `if_syncprov_sessionlog, `Enabled , false );
            }
        }
        return true;
    }

    global boolean DbSyncProvInput( symbol handler_cmd, integer index )
    {
        y2milestone("DbSyncProvInput %1 %2", handler_cmd, index);
        if ( handler_cmd == `cb_synprov_enable )
        {
            if ( UI::QueryWidget( `cb_synprov_enable , `Value ) == true )
            {
                UI::ChangeWidget( `f_sync_settings, `Enabled , true );
                UI::ChangeWidget( `f_sync_slog, `Enabled , true );
            }
            else
            {
                UI::ChangeWidget( `f_sync_settings, `Enabled , false );
                UI::ChangeWidget( `f_sync_slog, `Enabled , false );
            }
        }
        if ( UI::QueryWidget( `cb_sync_slog , `Value ) == true )
        {
            UI::ChangeWidget( `if_syncprov_sessionlog, `Enabled , true );
        }
        else
        {
            UI::ChangeWidget( `if_syncprov_sessionlog, `Enabled , false );
        }
        return true;
    }

    global map<string,any> DbSyncProvWrite( integer index )
    {
        y2milestone("DbSyncProvWrite %1", index );
        map <string,any> syncprov = $[];
        if( UI::QueryWidget( `cb_synprov_enable, `Value ) == true )
        {
            integer cp_ops = (integer) UI::QueryWidget( `if_syncprov_checkpoint_ops, `Value );
            integer cp_min = (integer) UI::QueryWidget( `if_syncprov_checkpoint_min, `Value );
            integer slog = (integer) UI::QueryWidget( `if_syncprov_sessionlog, `Value );
            syncprov = add(syncprov, "enabled", true );
            if ( cp_ops != 0 || cp_min != 0 )
            {
                map cp = $[ "ops" : cp_ops, "min" : cp_min ];
                syncprov =  add( syncprov, "checkpoint", cp );
            }
            if ( slog > 0 )
            {
                syncprov = add( syncprov, "sessionlog", slog );
            }
        }
        return syncprov;
    }

    define symbol DbPpolicy()
    {
        string caption = _("Password Policy Settings");
        term contents = editPolicy;
        Wizard::SetContentsButtons(caption, contents, HELPS["ppolicy_edit"]:"",
                Label::BackButton(), Label::FinishButton());
        symbol ret = `next;
        DbPpolicyRead(-1);
        while(true) {
            ret = (symbol)UI::UserInput();
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if (ret == `next )
            {
                ppolicyNew = DbPpolicyWrite(-1);
                break;
            }
            else if (ret == `back )
            {
                break;
            }
            else
            {
                DbPpolicyInput(ret, -1);
            }
        }
        return ret;
    }

    define symbol DbSyncRepl()
    {
        string caption = _("Replication Settings");
        term contents = GetSyncConsWidget();
        Wizard::SetContentsButtons(caption, contents, HELPS["synccons_edit"]:"",
                Label::BackButton(), Label::NextButton());
        symbol ret = `next;
        DbSyncConsRead(-1, $[], $[] );
        while(true) {
            ret = (symbol)UI::UserInput();
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if (ret == `next )
            {
                if ( DbSyncConsCheck(-1) )
                {
                    syncReplNew = DbSyncConsWrite(-1);
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if (ret == `back )
            {
                break;
            }
            else
            {
                DbSyncConsInput(ret, -1 );
            }
        }
        if ( size(syncReplNew) > 0)
        {
            ret = `syncrepl;
        }
        return ret;
    }

    global define any AddDbWizard()
    {
        map aliases = $[
            "basics" : ``( AddDbBasic(false) ),
            "syncrepl" : ``( DbSyncRepl() ),
            "ppolicy" : ``( DbPpolicy() )
        ];

        map sequence = $[
            "ws_start" : "basics",
            "basics" : $[
                `next  : "syncrepl",
                `abort : `abort
            ],
            "syncrepl" : $[
                `next : "ppolicy",
                `syncrepl : `next,
                `abort : `abort
            ],
            "ppolicy" : $[
                `next : `next,
                `abort : `abort
            ]
        ];

        baseDb = $[ "rootdn" : "cn=Administrator", "directory" : "/var/lib/ldap" ];

        Wizard::CreateDialog();

        any ret = Sequencer::Run(aliases, sequence);

        UI::CloseDialog();
        return ret;
    }

    global define map<string,any> GetDatabase()
    {
        return baseDb;
    }
    global define map<string,any> GetPpolicy()
    {
        return ppolicyNew;
    }
    global define map<string,any> GetSyncRepl()
    {
        return syncReplNew;
    }
    global define boolean GetCreateDir()
    {
        return createDbDir;
    }
    global define string GetLdapConfBase()
    {
        return ldapconf_basedn;
    }
}
