/**
 * File:	clients/ldap-server.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Main file
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 *
 * Main file for ldap-server configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of ldap-server</h3>
 */

textdomain "ldap-server";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("LdapServer module started");

import "Progress";
import "Report";
import "Summary";
import "RichText";
import "CommandLine";
include "ldap-server/wizards.ycp";

define boolean serviceHandler (map<string, string> options ) {

    string command = CommandLine::UniqueOption( options,
        ["enable", "disable" ] );
    if( command == nil ) return false;

    LdapServer::WriteServiceEnabled( command == "enable" );

    return true;
}

define boolean getDatabaseListHandler (map options) {

    list<map<string, string> > dbList = LdapServer::ReadDatabaseList();

    string s = "";
    foreach( map<string,string> db, dbList,
        {
            s = s + db["suffix"]:"" + " (" + db["type"]:"" + ") "  + "<br>";
        }
    );

    CommandLine::Print (RichText::Rich2Plain("<br>"+s));

    return false;
}

define boolean addDatabaseHandler (map options ) {

    boolean ret = false;
    map<string, string> db = $[];

//    map<string, any> edb = LdapServer::ReadDatabase();
//    y2milestone("DBs: %1", edb);
//
//
    if (options["basedn"]:nil != nil )
    {
        db["suffix"] = options["basedn"]:"";
    }
    else
    {
        CommandLine::Print (_("No base DN provided\n"));
        return false;
    }
    db["type"] = options["type"]:"hdb";
    if (options["rootdn"]:nil != nil)
    {
        db["rootdn"] = options["rootdn"]:"";
    }
    if (options["password"]:nil != nil)
    {
        db["rootpw_clear"] = options["password"]:"";
    }
    db["pwenctype"] = options["enctype"]:"SSHA";
    if (options["dbdir"]:nil != nil)
    {
        db["directory"] = options["dbdir"]:"";
    }

    if(LdapServer::ReadServiceEnabled() == false)
    {
        Report::Error(_("Database cannot be created when the service is not enabled"));
        return false;
    }

//    y2milestone("db-options : %1", db);
//
    ret = LdapServer::AddDatabase(0,db, true, true);

    if(!ret)
    {
        CommandLine::Print (_("Error while adding the database"));
        map<string, string> err = LdapServer::ReadError();
        Report::Error(err["msg"]:"" + "<br>" + err["details"]:"");
        return false;
    }
    return true;
}

define boolean getSchemaListHandler (map options ) {

    string s = "";
    integer i = 0;
    foreach(string v, LdapServer::ReadSchemaList (),
    {
        if ( v != "schema" ) // skip the baseentry (hardcoded schema)
            s = s + " "+ v +"<br>";
    });

    CommandLine::Print (RichText::Rich2Plain("<br>"+s));
    return false; // do not call Write...
}

define boolean addSchemaHandler (map options ) {

    if (options["file"]:"" != "")
    {
        string file = options["file"]:"";
        if ( regexpmatch( file, ".*\.schema$" ) )
        {
            if (! LdapServer::AddSchemaToSchemaList(file) ) {
                map<string, string> err = LdapServer::ReadError();
                Report::Error(err["msg"]:"" + "<br>" + err["details"]:"");
                return false;
            }
        }
        else if (! LdapServer::AddLdifToSchemaList(file) )
        {
            map<string, string> err = LdapServer::ReadError();
            Report::Error(err["msg"]:"" + "<br>" + err["details"]:"");
            return false;
        }
        return true;
    }
    return false;
}



map cmdline_description = $[
    "id" 	: "ldap-server",
    /* Command line help text for the Xldap-server module */
    "help"	: _("Configuration of LDAP server"),
    "guihandler"        : LdapServerSequence,
    "initialize"        : LdapServer::Read,
    "finish"            : LdapServer::Write,
    "actions"           : $[
        "service"     : $[
                        "handler"   : serviceHandler,
                        "help"      : _("Enable/Disable the service")
                        ],
        "addDatabase" : $[
                        "handler"   : addDatabaseHandler,
                        "help"      : _("Add a new database"),
                        ],
        "getDatabaseList" : $[
                        "handler"   : getDatabaseListHandler,
                        "help"      : _("Show a list of currently available databases"),
                        ],
        "getSchemaList": $[
                        "handler"   : getSchemaListHandler,
                        "help"      : _("Show a list of currently configured schemas"),
                        ],
        "addSchema":    $[
                        "handler"   : addSchemaHandler,
                        "help"      : _("Add a schema to the list"),
                        ],
    ],
    "options"		: $[
        "enable" : $[ "help"      : _("Enable the service") ],
        "disable" : $[ "help"      : _("Disable the service") ],
        "type" : $[
                    "help" : _("Database type (\"hdb\" or \"bdb\")"),
                    "type" : "string"
        ],
        "basedn" : $[
                    "help" : _("Base DN for the database"),
                    "type" : "string"
        ],
        "rootdn" : $[
                    "help" : _("DN for the administrator login"),
                    "type" : "string"
        ],
        "password" : $[
                    "help" : _("Administrator password"),
                    "type" : "string"
        ],
        "enctype" : $[
                    "help" : "SSHA, SHA, SMD5, CRYPT, PLAIN",
                    "type" : "string"
        ],
        "dbdir" : $[
                    "help" : _("Directory for the database"),
                    "type" : "string"
        ],
        "file" : $[
                    "help" : _("File"),
                    "type" : "string"
        ],
        "pos" : $[
                    "help" : _("Position"),
                    "type" : "string"
        ]
    ],
    "mappings"		: $[
        "service" :[ "enable", "disable" ],
        "addDatabase" : [ "basedn", "rootdn", "password", "enctype", "dbdir", "type" ],
        "getDatabaseList" : [],
        "getSchemaList" : [],
        "addSchema": [ "file" ]
    ]
];

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
}

/* main ui function */
any ret = nil;

if(propose) ret = InstProposalSequence();
else ret = CommandLine::Run(cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("LdapServer module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
