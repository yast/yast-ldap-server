/**
 * File:	include/ldap-server/wizards.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Wizards definitions
 * Authors:	Andreas Bauer <abauer@suse.de>
 *              Ralf Haferkamp <rhafer@suse.de>
 *
 * $Id$
 */

{

textdomain "ldap-server";

import "Sequencer";
import "Wizard";

include "ldap-server/complex.ycp";
include "ldap-server/dialogs.ycp";

/**
 * Main workflow of the ldap-server configuration
 * @return sequence result
 */
any MainSequence() {

    /* FIXME: adapt to your needs */
    map aliases = $[
        "tree"         : ``( TreeDialog() ),
        "writeservice" : ``( WriteServiceDialog() )
    ];

    map sequence = $[
	    "ws_start"  : "tree",
        "tree"      : $[
            `abort      : `abort,
            `back       : `abort,
            `cancel     : `abort,
            `next       : `next,
            `reread     : "writeservice",
            `empty      : `empty
        ],
        "writeservice" : $[
            `reread    : `reread
        ]
    ];

    Wizard::SetDesktopTitleAndIcon("ldap-server");
    any ret = Sequencer::Run(aliases, sequence);
    UI::CloseDialog();
    return ret;
}

any InstProposalSequence() {

    string caption = _("LDAP Server Configuration");
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("ldap-server");
    Wizard::SetContentsButtons(caption, contents, "",
           Label::BackButton(), Label::NextButton());
    Wizard::SetAbortButton(`abort, Label::CancelButton());

    LdapServer::WriteModeInstProposal(true);
    map aliases = $[
        "startup"   : ``( EnableServiceDialog() ),
        "servertype" : ``( ServerTypeDialog() ),
        "database"   : ``( ProposalDialog() ),
        "mastersetup" : ``( MasterSetupDialog() ),
        "slavesetup" : ``( SlaveSetupDialog() )
    ];

    map sequence = $[
        "ws_start"  : "startup",
        "startup"   : $[
            `next   : "servertype",
            `abort  : `abort,
            `finish : `disable
        ],
        "servertype" : $[
            `next   : "database",
            `slave_setup : "slavesetup",
            `abort  : `abort
        ],
        "slavesetup" : $[
            `next   : `next,
            `abort  : `abort
        ],
        "database"   : $[
            `mastersetup : "mastersetup",
            `next   : `next,
            `abort  : `abort
	],
        "mastersetup"   : $[
            `next   : `next,
            `abort  : `abort,
        ],
    ];

    y2milestone( "--> starting InstProposalSequence" );

    any ret = Sequencer::Run(aliases, sequence);

    y2milestone( "<-- InstProposalSequence finished " );

    UI::CloseDialog();
    LdapServer::WriteModeInstProposal(false);

    return ret;
}

any ProposalSequence() {

    /* Initialization dialog caption */
    string caption = _("LDAP Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("ldap-server");
    Wizard::SetContentsButtons(caption, contents, "",
           Label::BackButton(), Label::NextButton());

    map aliases = $[
        "startup"           : ``( EnableServiceDialog() ),
        "servertype"        : ``( ServerTypeDialog() ),
        "tlssettings"       : ``( TlsConfigDialog() ),
        "database"          : ``( ProposalDialog() ),
        "summary"           : ``( SummaryDialog() ),
        "advanced"          : ``( MainSequence() ),
        "write"             : ``( WriteDialog() ),
        "slavesetup"        : ``( SlaveSetupDialog() ),
        "mastersetup"       : ``( MasterSetupDialog() ),
        "replicationsummary": ``( ReplicatonSetupSummaryDialog() )
    ];

    map sequence = $[
        "ws_start"  : "startup",
        "startup"   : $[
            `next   : "servertype",
            `abort  : `abort,
            `finish : `abort
        ],
        "servertype" : $[
            `next        : "tlssettings",
            `slave_setup : "slavesetup"
        ],
        "slavesetup" : $[
            `next : "replicationsummary"
        ],
        "replicationsummary" : $[
            `next : "write"
        ],
        "tlssettings" : $[
            `next   : "database"
        ],
        "database"   : $[
            `next   : "summary",
            `mastersetup : "mastersetup",
            `abort  : `abort,
        ],
        "mastersetup"   : $[
            `next   : "summary",
            `abort  : `abort
        ],
        "summary"   : $[
            `next   : "write",
            `abort  : `abort,
            `advanced : "advanced"
        ],
        "advanced" : $[
            `abort      : `abort,
            `next       : "write"
        ],
        "write" : $[
            `abort      : `abort,
            `next       : `next
        ]
    ];

    y2milestone( "--> starting ProposalSequence" );

    any ret = Sequencer::Run(aliases, sequence);

    y2milestone( "<-- ProposalSequence finished " );

    UI::CloseDialog();

    return ret;
}

any MigrateSequence() {

    /* Initialization dialog caption */
    string caption = _("LDAP Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));


    map aliases = $[
        "startup"   : ``( MigrationMainDialog() ),
        "proposal"  : ``( ProposalSequence() ),
//        "authconfig"    : ``( MigrationDialog() ),
        "migrate"   : ``( DoMigration() )
    ];

    map sequence = $[
        "ws_start"  : "startup",
        "startup"   : $[
	    `abort  : `abort,
            `next   : "migrate",
            `initial : "proposal"
        ],
//        "authconfig"   : $[
//            `next   : "migrate"
//        ],
        "migrate"   : $[
            `next   : `next
        ],
        "proposal"  : $[
            `next   : `next
        ]
    ];

    y2milestone( "--> starting MigrateSequence" );

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("ldap-server");
    any ret = Sequencer::Run(aliases, sequence);

    y2milestone( "--> MigrateSequence finished " );

    UI::CloseDialog();

    return ret;
}

/**
 * Whole configuration of ldap-server
 * @return sequence result
 */
any LdapServerSequence() {

    map aliases = $[
	"read"	: ``( ReadDialog() ),
        "migrate" :  ``( MigrateSequence() ),
        "propose" : ``( ProposalSequence() ),
	"main"	  : ``( MainSequence() ),
        "writeservice" : ``( WriteServiceDialog() ),
	"write"	: ``( WriteDialog() )
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
            `initial    : "propose",
            `migrate    : "migrate",
	    `next	: "main",
            `reread     : "writeservice"
	],
        "migrate" : $[
            `abort      : `abort,
            `initial    : "propose",
            `next       : "main"
        ],
        "propose" : $[
            `next       : `next,
	    `abort	: `abort
        ],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write",
            `reread     : "read"
	],
        "writeservice" : $[
            `reread    : "read"
        ],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("ldap-server");

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of ldap-server but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any LdapServerAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("LDAP Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    y2milestone ( "--> starting LdapServerAutoSequence" );

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("ldap-server");
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = InstProposalSequence();

    UI::CloseDialog();

    y2milestone( "--> LdapServerAutoSequence finished " );

    return ret;
}

/* EOF */
}
