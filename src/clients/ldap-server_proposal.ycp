/**
 * File:        clients/ldap-server_proposal.ycp
 * Package:     Configuration of ldap-server
 * Summary:     Proposal function dispatcher.
 * Authors:     Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 *
 * Proposal function dispatcher for ldap-server configuration.
 * See source/installation/proposal/proposal-API.txt
 */

{

textdomain "ldap-server";

import "LdapServer";
import "Ldap";
import "HTML";
import "Label";
import "Mode";
import "Popup";
import "Report";
import "Progress";
import "Users";
import "Package";
import "String";
import "SuSEFirewall";
import "Wizard";

include "ldap-server/dialogs.ycp";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("LdapServer proposal started");
y2milestone( "Arguments: %1", WFM::Args() );

string func = (string) WFM::Args(0);
map param = (map) WFM::Args(1);
map ret = $[];


/* create a textual proposal */
if(func == "MakeProposal") {
    string proposal = "";
    string warning = nil;
    symbol warning_level = nil;
    boolean force_reset = param["force_reset"]:false;
    map <string,any> defaults = nil;


    if( force_reset || LdapServer::UseDefaults() )
    {
        if ( force_reset && LdapServer::Configured() )
        {
            /* error popup */
            Report::Warning( _("The LDAP database has already been created. You can change the settings later in the installed system.") );
        }
        else
        {
            if (!Package::Installed ("openldap2"))
            {
                y2milestone ("Openldap2 is not installed. --> service disabled");
                LdapServer::WriteServiceEnabled (false);
                // temporarly create the services file for the Firewallsettings
                if (SCR::Read(.target.size, "/etc/sysconfig/SuSEfirewall2.d/services/openldap") <= 0)
                {
                    SCR::Write(.target.string, "/etc/sysconfig/SuSEfirewall2.d/services/openldap",
                        "TCP=\"ldap ldaps\"\nUDP=\"ldap\"\n" );
                }
            }
            else
            {
                LdapServer::WriteServiceEnabled( true );
            }
            defaults = LdapServer::CreateInitialDefaults();
            defaults["serviceEnabled"] = LdapServer::ReadServiceEnabled();
            defaults["rootpw_clear"] = Users::GetRootPassword();
            LdapServer::SetInitialDefaults(defaults);
            SuSEFirewall::Read();
        }
    }

    //y2error( "sysconfig var is '%1'", SCR::Read( .sysconfig.openldap.OPENLDAP_REGISTER_SLP ) );

    if( LdapServer::ReadServiceEnabled() )
    {
        string rootPWString = "";
        defaults = LdapServer::CreateInitialDefaults();
        if (! LdapServer::ReadSetupSlave() )
        {
            if( defaults["rootpw_clear"]:"" == Users::GetRootPassword() )
            {
                rootPWString = _("[root password]");
            } else
            {
                rootPWString = _("[manually set]");
            }
            if( defaults["rootpw_clear"]:"" == "" )
            {
                warning = _("Unable to retrieve the system root password.  Set an LDAP server password to continue.");
                warning_level = `blocker;
            }
            if ( LdapServer::ReadSetupMaster() )
            {
                proposal = _("Setting up LDAP Master Server:");
            }
            else
            {
                proposal = _("Setting up standalone LDAP Server:");
            }
            proposal = proposal +
                HTML::List( [ _("Base DN: ") + defaults["suffix"]:"",
                              _("Root DN: ") + defaults["rootdn"]:"",
                              _("LDAP Password: ") + rootPWString
                            ] );
        }
        else
        {
            map <string,any> syncrepl = LdapServer::ReadSyncreplBaseConfig();
            proposal = _("Setting up LDAP Slave Server") +
                    HTML::List( [ _("Provider: ") + (string)syncrepl["provider","protocol"]:"" + "://"
                                                  + (string)syncrepl["provider","target"]:"" + ":"
                                                  + tostring(syncrepl["provider","port"]:0) ] );

        }
        // Try to get Firewall status
        string fw_text = "";
        if ( SuSEFirewall::GetEnableService()) {
                list<string> known_interfaces = SuSEFirewall::GetListOfKnownInterfaces();
                boolean is_ldap_enabled = false;
                if (size(known_interfaces)>0) {
                        y2milestone("Interfaces: %1", known_interfaces);
                        // all known interfaces for testing
                        list <string> used_zones = SuSEFirewall::GetZonesOfInterfaces(known_interfaces);
                        y2milestone("Zones used by firewall: %1", used_zones);

                        foreach (string zone, used_zones, {
                            if (SuSEFirewall::IsServiceSupportedInZone ("service:openldap", zone))
                                is_ldap_enabled = true;
                        });
                }
                textdomain "base";
                fw_text = _("Open Port in Firewall") + ": ";
                textdomain "ldap-server";
                if ( is_ldap_enabled )
                        fw_text = fw_text + HTML::Bold( _("YES"));
                else
                        fw_text = fw_text + HTML::Bold( _("NO"));

        } else {
                textdomain "base";
                fw_text = _("Firewall is disabled");
                textdomain "ldap-server";
        }
        proposal = proposal +
                _("Register at SLP Daemon: ") + HTML::Bold( defaults["slpRegister"]:false ? _("YES") : _("NO") ) +
                HTML::Newline() +
                fw_text;
    } else {
        proposal = _("Start LDAP Server: ") + HTML::Bold( _("NO") );
    }


    ret = $[
        "preformatted_proposal" : proposal,
        "warning_level" : warning_level,
        "warning" : warning,
    ];
}
/* run the module */
else if(func == "AskUser") {
    map stored = nil;
    symbol seq = nil;
    if( LdapServer::Configured() )
    {
                    /* error popup */
        Report::Warning( _("The LDAP database has already been created. You can change the settings later in the installed system.") );
        seq = `back;
    } else
    {
//        stored = LdapServer::Export();
        seq = (symbol) WFM::CallFunction("ldap-server", [.propose]);
        if(seq == `next) {
            LdapServer::WriteServiceEnabled( true );
        } else if (seq == `disable ) {
            LdapServer::WriteServiceEnabled( false );
            seq = `next;
        }
//        if(seq != `next) LdapServer::Import(stored);
    }
    y2debug("stored=%1",stored);
    y2debug("seq=%1",seq);
    ret = $[
    "workflow_sequence" : seq
    ];
}
/* create titles */
else if(func == "Description") {
    ret = $[
        /* Rich text title for LdapServer in proposals */
        "rich_text_title" : _("OpenLDAP Server"),
        /* Menu title for LdapServer in proposals */
        "menu_title" : _("Open&LDAP Server"),
        "id" : "ldap-server",
    ];
}
/* write the proposal */
else if(func == "Write") {
    if( LdapServer::Configured() ) return ret;

    if (!Package::Installed ("openldap2"))
    {
        //remove temp file
        SCR::Execute(.target.remove, "/etc/sysconfig/SuSEfirewall2.d/services/openldap");
    }
    if( LdapServer::ReadServiceEnabled() )
    {
        /* ensure openldap2 package is installed */
        if( !Package::Install( "openldap2" ) )
        {
            if( !Package::Available( "openldap2" ) ) {
                // translators: error popup before aborting the module
                Popup::Error( sformat( _("The package '%1' is not available.
YaST2 cannot continue the configuration
without installing the package."), "openldap2" ) );
            } else {
                // translators: error popup before aborting the module
                Popup::Error (_("YaST2 cannot continue the configuration
without installing the required packages."));
            }

            return ret;
        }

        if ( LdapServer::ReadSetupSlave() )
        {
            Wizard::CreateDialog();
            Wizard::SetDesktopTitleAndIcon("ldap-server");
            symbol slave_ret = (symbol) SlaveSetupDialog();
            Wizard::CloseDialog();
            if ( slave_ret == `next )
            {
                LdapServer::SetupRemoteForReplication();
            }
            else
            {
                Report::Error( _("OpenLDAP Replication Setup failed. Reconfigure after the installation has finished.") );
                return ret;
            }
        }
        LdapServer::ReadFromDefaults();
        map <string,any> defaults = LdapServer::CreateInitialDefaults();
        Progress::set(false);
        Ldap::Read();
        Progress::set(true);
        map ldapclient_defaults = Ldap::Export();
        ldapclient_defaults["ldap_server"] = "localhost";
        ldapclient_defaults["base_config_dn"] = "ou=ldapconfig,"+defaults["suffix"]:"";
        ldapclient_defaults["bind_dn"] = defaults["rootdn"]:"";
        ldapclient_defaults["ldap_domain"] = defaults["suffix"]:"";
        ldapclient_defaults["ldap_tls"] = false;
        ldapclient_defaults["file_server"] = true;
        ldapclient_defaults["create_ldap"] = true;

        if( !LdapServer::HaveCommonServerCertificate() )
        {
            Report::Error( _("OpenLDAP Server: Common server certificate not available.
StartTLS is disabled.") );
        }
        else
        {
            ldapclient_defaults["ldap_tls"] = true;
            LdapServer::WriteTlsConfigCommonCert();
        }

        Ldap::SetDefaults( ldapclient_defaults );
        Ldap::SetBindPassword( defaults["rootpw_clear"]:"" );
        LdapServer::WriteSLPEnabled( defaults["slpRegister"]:false );
        LdapServer::Write();
    }
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
}

/* Finish */
y2debug("ret=%1",ret);
y2milestone("LdapServer proposal finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
